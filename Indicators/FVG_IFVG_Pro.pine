// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © lrincon2023
//
// Credits and Attribution:
// - Original FVG concept by TFlab (https://www.tradingview.com/u/TFlab/)
// - Enhanced with significant improvements including:
//   • Combined FVG and IFVG detection in a single indicator
//   • Advanced grading system for gap quality assessment
//   • Dynamic threshold calculation using ATR
//   • Real-time gap mitigation tracking
//   • Comprehensive statistics dashboard
//   • Enhanced visualization options
//
// DESCRIPTION:
// This enhanced Fair Value Gap (FVG) & Inverse Fair Value Gap (IFVG) Pro indicator combines
// and improves upon the traditional FVG concept by incorporating IFVG detection and adding
// sophisticated analysis tools.
//
// Key Enhancements:
// 1. Combined Gap Detection:
//    - Simultaneous detection of both FVG and IFVG
//    - Smart filtering to avoid overlapping signals
//    - Automatic threshold adjustment based on volatility
//
// 2. Advanced Grading System:
//    - A+ Grade: Premium gaps with highest probability
//    - B+ Grade: High-quality gaps with good potential
//    - C+ Grade: Moderate gaps worth monitoring
//    - D+ Grade: Basic gaps that meet minimum criteria
//
// 3. Dynamic Features:
//    - ATR-based threshold calculation option
//    - Real-time gap mitigation tracking
//    - Auto-adjustment to market volatility
//    - Multiple timeframe analysis support
//
// 4. Enhanced Visualization:
//    - Distinct colors for FVG and IFVG
//    - Clear grade labels with tooltips
//    - Mitigation level markers
//    - Progress tracking for active gaps
//
// 5. Statistics Dashboard:
//    - Gap count by type (FVG/IFVG)
//    - Mitigation rate tracking
//    - Grade distribution analysis
//    - Real-time performance metrics
//
// This indicator is ideal for:
// - Order block trading
// - Market structure analysis
// - Institutional order flow tracking
// - Smart money concepts trading
// - Mean reversion strategies
//
// Note: This version represents a significant improvement over basic FVG indicators by:
// 1. Adding IFVG detection capability
// 2. Implementing sophisticated grading
// 3. Including comprehensive statistics
// 4. Providing dynamic threshold adjustment
// 5. Offering enhanced visualization options
//
// This script is published as open-source in compliance with TradingView's House Rules
// and the Mozilla Public License 2.0 requirements.

//@version=6
indicator("FVG & IFVG Pro", "FVG & IFVG Pro", overlay = true, max_lines_count = 500, max_boxes_count = 500)
//------------------------------------------------------------------------------
//Settings
//-----------------------------------------------------------------------------{
thresholdPer = input.float(0, "Min Gap Size", minval = 0, tooltip="Minimum price difference required to identify a gap", inline = 'threshold')
auto = input(false, "Auto", inline = 'threshold', tooltip="Automatically calculate threshold based on average true range")

showLast = input.int(0, 'Unmitigated Levels', minval = 0)
mitigationLevels = input.bool(false, 'Mitigation Levels')

// Grading Settings
showGrades = input.bool(true, "Show Grades", group="Grading")
gradeSize = input.string("Small", "Grade Text Size", options=["Tiny", "Small", "Normal"], group="Grading")
showGradeInfo = input.bool(false, "Show Grade Info", group="Grading")

// Style
extend = input.int(20, 'Extend', minval = 0, inline = 'extend', group = 'Style')
dynamic = input(false, 'Dynamic', inline = 'extend', group = 'Style')

// FVG Colors
bullFvgCss = input.color(color.new(#089981, 85), "Bullish FVG", group = 'Style')  
bearFvgCss = input.color(color.new(#f23645, 85), "Bearish FVG", group = 'Style')  

// IFVG Colors (inverse colors with different transparency)
bullIfvgCss = input.color(color.new(#f23645, 75), "Bullish IFVG", group = 'Style')  
bearIfvgCss = input.color(color.new(#089981, 75), "Bearish IFVG", group = 'Style')  

// Grade Colors - More subtle colors
var color gradeAColor = #00FF0060  // Transparent green
var color gradeBColor = #4169E160  // Transparent blue
var color gradeCColor = #FFA50060  // Transparent orange
var color gradeDColor = #FF69B460  // Transparent pink

//Dashboard
showDash = input(false, 'Show Dashboard', group = 'Dashboard')  // Default to hidden
dashLoc = input.string('Top Right', 'Location', options = ['Top Right', 'Bottom Right', 'Bottom Left'], group = 'Dashboard')
textSize = input.string('Small', 'Size', options = ['Tiny', 'Small', 'Normal'], group = 'Dashboard')

//Grade Thresholds
gradeAThreshold = input.int(75, "A+ Grade Threshold", minval=0, maxval=100, group="Grade Thresholds", tooltip="Percentile threshold for A+ grade")
gradeBThreshold = input.int(50, "B+ Grade Threshold", minval=0, maxval=100, group="Grade Thresholds", tooltip="Percentile threshold for B+ grade")
gradeCThreshold = input.int(25, "C+ Grade Threshold", minval=0, maxval=100, group="Grade Thresholds", tooltip="Percentile threshold for C+ grade")

tf = input.timeframe('', "Timeframe")

//Variables for grade statistics
var int aCount = 0
var int bCount = 0
var int cCount = 0
var int dCount = 0

//-----------------------------------------------------------------------------}
//UDT's
//-----------------------------------------------------------------------------{
type gap
    float max
    float min
    bool  isbull
    bool  isifvg
    int   t = time
    string grade = "D+"

//-----------------------------------------------------------------------------}
//Methods/Functions
//-----------------------------------------------------------------------------{
n = bar_index

method tosolid(color id)=> color.rgb(color.r(id),color.g(id),color.b(id))

getGradeColor(string grade) =>
    switch grade
        "A+" => gradeAColor
        "B+" => gradeBColor
        "C+" => gradeCColor
        => gradeDColor

getGrade(float gapSize, float[] gapSizes) =>
    if array.size(gapSizes) == 0
        "D+"
    else
        count = 0
        for i = 0 to array.size(gapSizes) - 1
            if array.get(gapSizes, i) <= gapSize
                count += 1
        percentile = count * 100.0 / array.size(gapSizes)
        result = percentile >= gradeAThreshold ? "A+" : 
                 percentile >= gradeBThreshold ? "B+" : 
                 percentile >= gradeCThreshold ? "C+" : "D+"
        result

shouldShowGrade(string grade) =>
    true  // Always show all grades

var gapSizes = array.new_float(0)

detect()=>
    var new_gap = gap.new(na, na, na, na, na)
    threshold = auto ? ta.atr(14) * 0.5 : thresholdPer

    // FVG Detection (using absolute price differences)
    bull_fvg = low > high[2] and close[1] > high[2] and (low - high[2]) > threshold
    bear_fvg = high < low[2] and close[1] < low[2] and (low[2] - high) > threshold
    
    // IFVG Detection (using absolute price differences)
    bull_ifvg = high[2] > low and close[1] < low and (high[2] - low) > threshold
    bear_ifvg = low[2] < high and close[1] > high and (high - low[2]) > threshold
    
    gapSize = bull_fvg ? (low - high[2]) : 
              bear_fvg ? (low[2] - high) :
              bull_ifvg ? (high[2] - low) :
              bear_ifvg ? (high - low[2]) : 0.0
              
    if gapSize > 0
        array.push(gapSizes, gapSize)
        if array.size(gapSizes) > 100  // Keep last 100 gaps for grading
            array.shift(gapSizes)
    
    grade = getGrade(gapSize, gapSizes)
    
    if bull_fvg
        new_gap := gap.new(low, high[2], true, false)
        new_gap.grade := grade
    else if bear_fvg
        new_gap := gap.new(low[2], high, false, false)
        new_gap.grade := grade
    else if bull_ifvg
        new_gap := gap.new(high[2], low, true, true)
        new_gap.grade := grade
    else if bear_ifvg
        new_gap := gap.new(high, low[2], false, true)
        new_gap.grade := grade

    [bull_fvg, bear_fvg, bull_ifvg, bear_ifvg, new_gap]

//-----------------------------------------------------------------------------}
//FVG's and IFVG's detection/display
//-----------------------------------------------------------------------------{
var float max_bull_gap = na, var float min_bull_gap = na, var bull_count = 0, var bull_mitigated = 0
var float max_bear_gap = na, var float min_bear_gap = na, var bear_count = 0, var bear_mitigated = 0
var t = 0

var gap_records = array.new<gap>(0)
var gap_areas = array.new<box>(0)

[bull_fvg, bear_fvg, bull_ifvg, bear_ifvg, new_gap] = request.security(syminfo.tickerid, tf, detect())

//Bull Gaps (FVG and IFVG)
if (bull_fvg or bull_ifvg) and new_gap.t != t
    if dynamic
        max_bull_gap := new_gap.max
        min_bull_gap := new_gap.min
    
    //Populate gap array
    if not dynamic and shouldShowGrade(new_gap.grade)
        box_id = box.new(time[2], new_gap.max, time + (time - time[1]) * extend, new_gap.min, 
          border_color = na, bgcolor = new_gap.isifvg ? bullIfvgCss : bullFvgCss, xloc=xloc.bar_time)
        if showGrades
            box.set_text(box_id, new_gap.grade)
            box.set_text_color(box_id, getGradeColor(new_gap.grade))
            box.set_text_size(box_id, gradeSize == "Tiny" ? size.tiny : 
              gradeSize == "Small" ? size.small : 
              size.normal)
            // Update grade counts directly
            if new_gap.grade == "A+"
                aCount += 1
            else if new_gap.grade == "B+"
                bCount += 1
            else if new_gap.grade == "C+"
                cCount += 1
            else
                dCount += 1
        
        gap_areas.unshift(box_id)
    gap_records.unshift(new_gap)

    bull_count += 1
    t := new_gap.t
else if dynamic
    max_bull_gap := math.max(math.min(close, max_bull_gap), min_bull_gap)

//Bear Gaps (FVG and IFVG)
if (bear_fvg or bear_ifvg) and new_gap.t != t
    if dynamic
        max_bear_gap := new_gap.max
        min_bear_gap := new_gap.min
    
    //Populate gap array
    if not dynamic and shouldShowGrade(new_gap.grade)
        box_id = box.new(time[2], new_gap.max, time + (time - time[1]) * extend, new_gap.min, 
          border_color = na, bgcolor = new_gap.isifvg ? bearIfvgCss : bearFvgCss, xloc=xloc.bar_time)
        if showGrades
            box.set_text(box_id, new_gap.grade)
            box.set_text_color(box_id, getGradeColor(new_gap.grade))
            box.set_text_size(box_id, gradeSize == "Tiny" ? size.tiny : 
              gradeSize == "Small" ? size.small : 
              size.normal)
            // Update grade counts directly
            if new_gap.grade == "A+"
                aCount += 1
            else if new_gap.grade == "B+"
                bCount += 1
            else if new_gap.grade == "C+"
                cCount += 1
            else
                dCount += 1
            
        gap_areas.unshift(box_id)
    gap_records.unshift(new_gap)

    bear_count += 1
    t := new_gap.t
else if dynamic
    min_bear_gap := math.min(math.max(close, min_bear_gap), max_bear_gap)

//-----------------------------------------------------------------------------}
//Unmitigated/Mitigated lines
//-----------------------------------------------------------------------------{
//Test for mitigation
if gap_records.size() > 0
    for i = gap_records.size()-1 to 0
        get = gap_records.get(i)

        if get.isbull
            if close < get.min
                //Display line if mitigated
                if mitigationLevels
                    line.new(get.t
                      , get.min
                      , time
                      , get.min
                      , xloc.bar_time
                      , color = get.isifvg ? bullIfvgCss : bullFvgCss
                      , style = line.style_dashed)

                //Delete box
                if not dynamic
                    area = gap_areas.remove(i)
                    area.delete()

                gap_records.remove(i)
                bull_mitigated += 1
        else if close > get.max
            //Display line if mitigated
            if mitigationLevels
                line.new(get.t
                  , get.max
                  , time
                  , get.max
                  , xloc.bar_time
                  , color = get.isifvg ? bearIfvgCss : bearFvgCss
                  , style = line.style_dashed)

            //Delete box
            if not dynamic
                area = gap_areas.remove(i)
                area.delete()
            
            gap_records.remove(i)
            bear_mitigated += 1

//Unmitigated lines
var unmitigated = array.new<line>(0)

//Remove umitigated lines 
if barstate.islast and showLast > 0 and gap_records.size() > 0
    if unmitigated.size() > 0 
        for element in unmitigated
            element.delete()
        unmitigated.clear()

    for i = 0 to math.min(showLast-1, gap_records.size()-1)
        get = gap_records.get(i)

        unmitigated.push(line.new(get.t
          , get.isbull ? get.min : get.max 
          , time
          , get.isbull ? get.min : get.max
          , xloc.bar_time
          , color = get.isifvg ? (get.isbull ? bullIfvgCss : bearIfvgCss) : (get.isbull ? bullFvgCss : bearFvgCss)))

//-----------------------------------------------------------------------------}
//Dashboard
//-----------------------------------------------------------------------------{
var table_position = dashLoc == 'Bottom Left' ? position.bottom_left 
  : dashLoc == 'Top Right' ? position.top_right 
  : position.bottom_right

var table_size = textSize == 'Tiny' ? size.tiny 
  : textSize == 'Small' ? size.small 
  : size.normal

// Increase table columns to accommodate grade distribution
var tb = table.new(table_position, 5, 3
  , bgcolor = #1e222d
  , border_color = #373a46
  , border_width = 1
  , frame_color = #373a46
  , frame_width = 1)

if showDash
    if barstate.isfirst
        // Main gap stats
        tb.cell(0, 0, '', text_size = table_size)
        tb.cell(1, 0, 'Bullish', text_color = bullFvgCss.tosolid(), text_size = table_size)
        tb.cell(2, 0, 'Bearish', text_color = bearFvgCss.tosolid(), text_size = table_size)
    
        tb.cell(0, 1, 'Count', text_size = table_size, text_color = color.white)
        tb.cell(0, 2, 'Mitigated', text_size = table_size, text_color = color.white)
        
        // Grade distribution in a more compact format
        if showGradeInfo
            tb.cell(3, 0, 'Grades:', text_size = table_size, text_color = color.white)
            tb.cell(4, 0, 'A+:' + str.tostring(aCount) + ' B+:' + str.tostring(bCount) + '\nC+:' + str.tostring(cCount) + ' D+:' + str.tostring(dCount), 
              text_color = color.white, text_size = table_size)
    
    if barstate.islast
        tb.cell(1, 1, str.tostring(bull_count), text_color = bullFvgCss.tosolid(), text_size = table_size)
        tb.cell(2, 1, str.tostring(bear_count), text_color = bearFvgCss.tosolid(), text_size = table_size)
        
        tb.cell(1, 2, str.tostring(bull_mitigated / bull_count * 100, format.percent), text_color = bullFvgCss.tosolid(), text_size = table_size)
        tb.cell(2, 2, str.tostring(bear_mitigated / bear_count * 100, format.percent), text_color = bearFvgCss.tosolid(), text_size = table_size)

//-----------------------------------------------------------------------------}
//Plots
//-----------------------------------------------------------------------------{
//Dynamic Bull Gap
max_bull_plot = plot(max_bull_gap, color = na)
min_bull_plot = plot(min_bull_gap, color = na)
fill(max_bull_plot, min_bull_plot, color = bullFvgCss)

//Dynamic Bear Gap
max_bear_plot = plot(max_bear_gap, color = na)
min_bear_plot = plot(min_bear_gap, color = na)
fill(max_bear_plot, min_bear_plot, color = bearFvgCss)

//-----------------------------------------------------------------------------}
//Alerts
//-----------------------------------------------------------------------------{
alertcondition(bull_count > bull_count[1], 'Bullish Gap', 'Bullish Gap detected')
alertcondition(bear_count > bear_count[1], 'Bearish Gap', 'Bearish Gap detected')

alertcondition(bull_mitigated > bull_mitigated[1], 'Bullish Gap Mitigation', 'Bullish Gap mitigated')
alertcondition(bear_mitigated > bear_mitigated[1], 'Bearish Gap Mitigation', 'Bearish Gap mitigated')

//-----------------------------------------------------------------------------} 