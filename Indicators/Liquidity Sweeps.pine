// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © lrincon2023
//
// Credits and Attribution:
// - Original concept and base code by OutofOptions (https://www.tradingview.com/u/OutofOptions/)
// - Enhanced with additional features including:
//   • Advanced grading system (A+, B+, C+, D+) replacing emoji ratings
//   • Detailed analytics for sweep quality assessment
//   • Enhanced visualization and tooltips
//   • Comprehensive alert system
//
// DESCRIPTION:
// This enhanced Liquidity Sweeps indicator helps traders identify and analyze market liquidity levels
// and their subsequent sweeps. It detects both bullish and bearish liquidity zones, tracking how price
// interacts with these levels over time.
//
// Key Features:
// 1. Liquidity Detection:
//    - Identifies both bullish and bearish liquidity levels
//    - Option to find maximum liquidity points or only swing liquidity
//    - Adjustable sensitivity for both left and right swing detection
//
// 2. Advanced Grading System:
//    - A+ Grade: Very strong sweeps (60+ minutes between creation and sweep)
//    - B+ Grade: Strong sweeps (15+ minutes or significant price movement)
//    - C+ Grade: Moderate sweeps (5+ minutes or 10%+ price movement)
//    - D+ Grade: Weak sweeps (quick sweeps with minimal price movement)
//
// 3. Visual Features:
//    - Clear color-coded liquidity lines
//    - Dashed lines showing swept levels
//    - Grade labels with detailed tooltips
//    - Customizable line colors and widths
//
// 4. Detailed Analytics:
//    - Time elapsed between level creation and sweep
//    - Price movement percentage from the swept level
//    - Distance to next bearish/bullish levels
//    - Real-time tracking of current price relative to levels
//
// 5. Alert System:
//    - Customizable alerts based on sweep strength
//    - Detailed alert messages with level information
//    - Multiple alert conditions for different trading strategies
//
// This indicator is ideal for:
// - Order block trading
// - Supply and demand analysis
// - Market structure trading
// - Stop hunt identification
// - Liquidity-based trading strategies
//
// This script is published as open-source in compliance with TradingView's House Rules
// and the Mozilla Public License 2.0 requirements.

//@version=6
indicator('Liquidity Swings & Sweeps', shorttitle='Liquidity Swings/Sweeps', overlay=true)

// =================== Input Settings ===================
// Swing Detection Settings
Llength = input.int(5, title="Swing Sensitivity (Left)", group = "Settings", minval = 1)
Rlength = input.int(2, title="Swing Sensitivity (Right)", group = "Settings", minval = 1)
maximumLiquidity = input.bool(true, title="Find Maximum Liquidity", group = "Settings")

// Visual Settings
upLiquidityColor = input.color(color.new(color.red,35), title = "High/Low Liquidity Line Color", inline = "visualline", group ="Appearance")
downLiquidityColor = input.color(color.new(color.teal,35), title = " ", inline = "visualline",group = "Appearance")
lineWidth = input.int(1, "Line Width", minval=1, maxval=5, step=1, group="Appearance")
drawTakenLiquidityLabel = input.bool(true, title="Show Liquidity Sweep Label/Rating", group="Appearance")

// Alert Settings
alert_d = input.bool(false, "D+ (Weak)", group="Alert on Liquidity Sweep", inline="alerts")
alert_c = input.bool(false, "C+ (Moderate)", group="Alert on Liquidity Sweep", inline="alerts")
alert_b = input.bool(true, "B+ (Strong)", group="Alert on Liquidity Sweep", inline="alerts")
alert_a = input.bool(true, "A+ (Very Strong)", group="Alert on Liquidity Sweep", inline="alerts")
alertMessage = input.text_area("Liquidity Sweep: ", title="Alert Message Prefix", group="Alert on Liquidity Sweep")

// =================== Constants ===================
var const string tz = "America/New_York"
var const string tf = "hh:mm:ss a"

// Grade Colors
var color gradeAColor = #00FF0060  // Transparent green
var color gradeBColor = #4169E160  // Transparent blue
var color gradeCColor = #FFA50060  // Transparent orange
var color gradeDColor = #FF69B460  // Transparent pink

// =================== Type Definitions ===================
// Liquidity Type
type liquidity
    float price
    int time = 0
    bool broken = false
    line drawLine = na
    line breakLine = na
    label breakLabel = na
    int brokenTime = 0
    bool current = false

// High/Low Type
type HL
    float price
    int time

// =================== Global Variables ===================
// Arrays for liquidity
var array<liquidity> bullishLiquidity = array.new<liquidity>()
var array<liquidity> bearishLiquidity = array.new<liquidity>()

// Arrays for high/low points
var array<HL> HLA = array.new<HL>()
var array<HL> LLA = array.new<HL>()

// Variables for storing next levels
var float storedNextBearishLevel = na
var float storedNextBullishLevel = na
var float percentToBearish = na
var float percentToBullish = na

// =================== Utility Functions ===================
// Time Format Function
TF(t) =>
    str.format_time(t, tf, tz)

// Clear Drawings Function
CD(liquidity swing) =>
    line.delete(swing.drawLine)
    line.delete(swing.breakLine)
    label.delete(swing.breakLabel)

// Grade Color Function
getGradeColor(string grade) =>
    switch grade
        "A+" => gradeAColor
        "B+" => gradeBColor
        "C+" => gradeCColor
        => gradeDColor

// =================== Liquidity Detection ===================
// Find maximum liquidity points
if maximumLiquidity
    p1 = ta.pivothigh(high, 1, 1)
    p2 = ta.pivotlow(low, 1, 1)
    if (not na(p1))
        HLA.push(HL.new(price = p1, time = time[1]))
    if (not na(p2))
        LLA.push(HL.new(price = p2, time = time[1]))

// Identify pivot points
ph = ta.pivothigh(high, Llength, Rlength)
pl = ta.pivotlow(low, Llength, Rlength)

if not na(ph)
    array.push(bearishLiquidity, liquidity.new(price = ph, time = time[Rlength]))

if not na(pl)
    array.push(bullishLiquidity, liquidity.new(price = pl, time = time[Rlength]))

// =================== Sub-Swing Detection ===================
findSubSwing(array<HL> list, bool bullish, liquidity swing, liquidity last_broken, int max_time) =>
    int b = list.size() - 1
    while (b > 0)
        c = array.get(list, b)
        b -= 1
        if (last_broken.time > 0  and c.time > last_broken.time)
            array.remove(list, b + 1)
            continue
        if c.time >= swing.time
            continue
        if (max_time > c.time) or (bullish ? c.price >= swing.price : c.price <= swing.price)
            break
        if na(last_broken.price) or (bullish ? c.price >= last_broken.price : c.price <= last_broken.price)
            array.remove(list, b + 1)
            last_broken.time := c.time
            last_broken.price := c.price
            last_broken.brokenTime := swing.time

// =================== Rendering Function ===================
render(array<liquidity> swingArray, bool bullish) =>
    int n = array.size(swingArray) - 1
    color clr = bullish ? upLiquidityColor : downLiquidityColor
    float nextBearish = na
    float nextBullish = na
    
    while n > 0
        liquidity swing = array.get(swingArray, n)
        bool validSwing = bullish ? (swing.price >= high) : (swing.price <= low)
        if (validSwing == false)
            if swing.broken == false
                swing.broken := true
                swing.brokenTime := time
                if swing.current
                    CD(swing)
            n -= 1
            continue
        if (swing.current == false)
            swing.current := true
            swing.drawLine := line.new(x1=swing.time, y1=swing.price, x2=last_bar_time, y2=swing.price, xloc=xloc.bar_time, width=lineWidth, color=clr)
            
            // Store level values to return
            if not bullish and swing.price > close  // Bearish level above price
                nextBearish := swing.price
            if bullish and swing.price < close      // Bullish level below price
                nextBullish := swing.price

            liquidity prev_swing = na
            liquidity last_broken = na
            while (n > 0)
                n -= 1
                prev_swing := array.get(swingArray, n)
                if bullish ? (prev_swing.price > swing.price) : (swing.price > prev_swing.price)
                    break
                if (na(last_broken))
                    last_broken := prev_swing
                else if bullish ? (prev_swing.price >= last_broken.price) : (prev_swing.price <= last_broken.price)
                    last_broken := prev_swing
                if last_broken.current
                    CD(last_broken)
                    if (swing.time >= last_broken.time)
                        array.remove(swingArray, n)
            if (maximumLiquidity)
                if (na(last_broken))
                    last_broken := liquidity.new(price=na)
                findSubSwing(bullish ? HLA : LLA, bullish, swing, last_broken, prev_swing.time)
            if (not na(last_broken))
                if (last_broken.price != swing.price)
                    bt = last_broken.brokenTime > 0 ? last_broken.brokenTime : swing.time
                    swing.breakLine := line.new(x1=last_broken.time, y1=last_broken.price, x2=bt, y2=last_broken.price, xloc=xloc.bar_time, width=lineWidth, color=clr, style=line.style_dashed)
                    if drawTakenLiquidityLabel == true
                        bool do_alert = false
                        float timeD = math.round((bt - last_broken.time) / 60000, 2)
                        int hours = 0
                        float pd = bullish ? swing.price - last_broken.price : last_broken.price - swing.price
                        float percentageChangeCurrent = ((close - last_broken.price) / last_broken.price) * 100
                        
                        float localPercentToBearish = na
                        float localPercentToBullish = na
                        if not na(storedNextBearishLevel)
                            localPercentToBearish := ((storedNextBearishLevel - close) / close) * 100
                        if not na(storedNextBullishLevel)
                            localPercentToBullish := ((storedNextBullishLevel - close) / close) * 100

                        string rating = "D+"
                        int tfs = timeframe.in_seconds()
                        if (timeD >= 60)
                            hours := math.floor(timeD / 60)
                            timeD -= hours * 60
                            rating := "A+"
                            do_alert := alert_a
                        else if (timeD >= 15)
                            rating := "B+"
                            do_alert := alert_b
                        else if timeD >= 5
                            rating := pd >= 10 ? "B+" : "C+"
                            do_alert := alert_c
                        else if pd >= 10
                            rating := "B+"
                            do_alert := alert_b
                        else
                            rating := "C+"
                            do_alert := alert_c

                        var string tooltip = ""
                        tooltip := "Liquidity Level: " + str.tostring(last_broken.price)
                        tooltip := tooltip + "\nTime Created: " + TF(last_broken.time)
                        tooltip := tooltip + "\nTime Swept: " + TF(bt)
                        tooltip := tooltip + "\nTime Elapsed: " + (hours>0 ? str.tostring(hours) + "h " : "") + str.tostring(timeD) + "m"
                        tooltip := tooltip + "\nCurrent Price Move: " + str.tostring(percentageChangeCurrent, "#.##") + "% from level"
                        if not na(storedNextBearishLevel)
                            tooltip := tooltip + "\nTo Bearish Level: " + str.tostring(localPercentToBearish, "#.##") + "%"
                        if not na(storedNextBullishLevel)
                            tooltip := tooltip + "\nTo Bullish Level: " + str.tostring(localPercentToBullish, "#.##") + "%"

                        if do_alert and (time - bt) < tfs * 5 * 1000 
                            alert(alertMessage + rating + " " + tooltip, alert.freq_once_per_bar)

                        dbars = (bt - last_broken.time) / 1000 / tfs
                        xpos = dbars > 30 ? bt - 10 * tfs * 1000 : math.round(math.avg(last_broken.time, bt))

                        swing.breakLabel := label.new(x=xpos, y=last_broken.price, xloc=xloc.bar_time, color=getGradeColor(rating), style=label.style_label_down, text=rating, tooltip=tooltip, size=size.small, textalign=text.align_center)
        else
            swing.drawLine.set_x2(last_bar_time)
        break
    [nextBearish, nextBullish]

// =================== Main Logic ===================
if barstate.islast
    [bearNext, bullNext1] = render(bearishLiquidity, true)
    [bearNext2, bullNext2] = render(bullishLiquidity, false)
    
    // Update stored levels
    storedNextBearishLevel := na(bearNext) ? bearNext2 : bearNext
    storedNextBullishLevel := na(bullNext1) ? bullNext2 : bullNext1
    
    // Update percentages
    if not na(storedNextBearishLevel)
        percentToBearish := ((storedNextBearishLevel - close) / close) * 100
    if not na(storedNextBullishLevel)
        percentToBullish := ((storedNextBullishLevel - close) / close) * 100 